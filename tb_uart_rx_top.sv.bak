`timescale 1ns / 1ps

module tb_uart_rx_top;

    // ===========================================
    // Tham số UART
    // ===========================================
    localparam CLK_FREQ   = 50_000_000;    // 50 MHz
    localparam BAUD_RATE  = 115200;
    localparam BAUD_DIV   = CLK_FREQ / BAUD_RATE;  // ~434
    localparam TICK_DIV   = 27;
    localparam BIT_PERIOD = 1_000_000_000 / BAUD_RATE;  // ns

    // ===========================================
    // Tín hiệu
    // ===========================================
    logic clk;
    logic rst_n;
    logic rx;
    logic enable;

    logic [127:0] data_out_128;
    logic         data_valid;
    logic         buffer_full;
    logic         buffer_empty;

    // ===========================================
    // Khởi tạo DUT (Device Under Test)
    // ===========================================
    uart_rx_top #(
        .BAUD_DIV(BAUD_DIV),
        .TICK_DIV(TICK_DIV)
    ) dut (
        .clk(clk),
        .rst_n(rst_n),
        .rx(rx),
        .enable(enable),
        .data_out_128(data_out_128),
        .data_valid(data_valid),
        .buffer_full(buffer_full),
        .buffer_empty(buffer_empty)
    );

    // ===========================================
    // Tạo xung clock 50 MHz
    // ===========================================
    initial clk = 0;
    always #10 clk = ~clk;  // 20ns -> 50MHz

    // ===========================================
    // Tác vụ gửi 1 byte qua UART (LSB trước)
    // ===========================================
    task send_uart_byte(input [7:0] data);
        integer i;
        begin
            rx <= 1'b0; // Start bit
            #(BIT_PERIOD);

            // Gửi từng bit LSB trước
            for (i = 0; i < 8; i++) begin
                rx <= data[i];
                #(BIT_PERIOD);
            end

            rx <= 1'b1; // Stop bit
            #(BIT_PERIOD);
        end
    endtask

    // ===========================================
    // Test chính
    // ===========================================
    integer k;
    initial begin
        $display("=== BẮT ĐẦU MÔ PHỎNG UART RX TOP ===");
        rx      = 1'b1;   // iddle high
        rst_n   = 1'b0;
        enable  = 1'b0;
        #(200);
        rst_n   = 1'b1;

        // Gửi 16 byte (1 block 128 bit)
        $display("[TEST] Gửi 16 byte qua UART RX...");
        for (k = 0; k < 16; k++) begin
            send_uart_byte(8'hA0 + k);  // Gửi dữ liệu: A0, A1, A2, ..., AF
        end

        $display("[TEST] Hoàn tất gửi dữ liệu, chờ UART RX xử lý...");

        // Chờ cho UART RX lưu vào buffer
        #(5_000_000);  // 5ms

        // Kích hoạt enable để đọc block 128-bit
        enable = 1'b1;
        #(100);
        enable = 1'b0;

        // Quan sát dữ liệu đầu ra
        wait (data_valid);
        $display("[OUTPUT] Data valid! Block 128-bit = %032h", data_out_128);

        #(1000);
        $display("[TEST] Kết thúc mô phỏng.");
        $stop;
    end

endmodule
